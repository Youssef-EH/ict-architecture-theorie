apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  clusterIP: None # headless
  selector:
    app: mysql
---
# MySQL leest alle .cnf files in /etc/mysql/conf.d/
# dus we maken twee files en zullen deze naar de geschikte pods kopiëren
# instructies staan hier: https://dev.mysql.com/doc/refman/8.4/en/replication-howto.html
apiVersion: v1
kind: ConfigMap
metadata:
  name: cnf-files-config
data:
  primary.cnf: |
    [mysqld]
    server-id=1
    log-bin=mysql-bin
    binlog_do_db=demo
  secondary.cnf: |
    [mysqld]
    server-id=2
    relay-log=relay-log
    read_only=1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-scripts-config
data:
  create-replica-user-on-primary.sql: |
    CREATE USER 'replicauser'@'%' IDENTIFIED BY 'replicapassword';
    GRANT REPLICATION SLAVE ON *.* TO 'replicauser'@'%';
    FLUSH PRIVILEGES;
  # log file en log pos achterhaald door gewoon te proberen
  change-source-on-secondary.sql:
    CHANGE REPLICATION SOURCE TO
     SOURCE_HOST='mysql-0.mysql',
     SOURCE_USER='replicauser',
     SOURCE_PASSWORD='replicapassword',
     SOURCE_LOG_FILE='mysql-bin.000003',
     SOURCE_LOG_POS=158;
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: "mysql" # de headless service moet dus zo heten
  replicas: 2 # één primary, één secondary
  template:
    metadata:
      labels:
        app: mysql
    spec:
      # in elke Pod loopt een "init container"
      # deze runt opstarttaken
      # dit staat toe config files per pod aan te passen
      # dus mysql image is dezelfde maar configuratie verschilt per pod
      # de init container en gewone container delen toegang tot volume
      # je zou deze gewoon als normale containers kunnen runnen en inspecteren om het voor jezelf duidelijker te maken indien nodig
      initContainers:
        - name: init-copy-config
          image: busybox
          command: ["/bin/sh", "-c"] # er volgt een volledig script, dat is lastig met command
          # dit is in essentie hoe je een shell script kan laten lopen
          args:
            - |
              POD_NAME=$(hostname)
              if [ "$POD_NAME" = "mysql-0" ]; then
                cp /cnf-files-config/primary.cnf /specific-config/my.cnf;
                cp /init-scripts/create-replica-user-on-primary.sql /specific-init-scripts/;
              else
                cp /cnf-files-config/secondary.cnf /specific-config/my.cnf;
                cp /init-scripts/change-source-on-secondary.sql /specific-init-scripts/;
              fi
          volumeMounts:
            - name: cnf-files-volume
              mountPath: /cnf-files-config
            - name: init-scripts-volume
              mountPath: /init-scripts
            - name: specific-config
              mountPath: /specific-config
            - name: specific-init-scripts
              mountPath: /specific-init-scripts
      containers:
        - name: mysql
          image: mysql:8.4
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: my-secret-pw
            - name: MYSQL_DATABASE
              value: demo
          volumeMounts:
            - name: specific-config
              mountPath: /etc/mysql/conf.d
            - name: specific-init-scripts
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: cnf-files-volume
          configMap:
            name: cnf-files-config
        - name: init-scripts-volume
          configMap:
            name: init-scripts-config
        # iedere pod krijgt een leeg volume waarnaar de juiste file gekopieerd wordt
        - name: specific-config
          emptyDir: {}
        - name: specific-init-scripts
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

